set cut_paste_input [stack 0]
version 12.1 v1
Group {
 inputs 0
 name SmoothCamGenerator1
 tile_color 0xbf5100ff
 selected true
 xpos 138
 ypos 341
 addUserKnob {20 User}
 addUserKnob {22 smoothCamGen l "smooth cam generator" T "\nwith nuke.thisNode():\n    \n    import nuke    \n    \nimport nuke\n\n\n###from NUKE Python Developer's Guide v10.0v1 documentation Â»###\n##added bake functionality as a script button\n\ndef bakeCurve( curve, first, last, inc ):\n    '''bake an expresison curve into a keyframes curve'''\n    try:\n        for f in xrange( first, last, inc ):\n            curve.setKey( f, curve.evaluate( f ) )\n        curve.setExpression( 'curve' )\n    except:\n        for f in range( first, last, inc ):\n            curve.setKey( f, curve.evaluate( f ) )\n        curve.setExpression( 'curve' )\n\n####################################################\ndef getCurves( knob, views ):\n    '''return a list of all animation curves found in the given knob'''\n    curves = \[]\n    for v in views:\n        curves.extend( knob.animations( v ) )\n    return curves\n\n####################################################\ndef bakeExpressionKnobs( node, first, last, inc, views ):  \n    '''bake all knobs in node that carry expressions'''\n    # GET ALL KNOBS WITH EXPRESSIONS IN THEM\n    expKnobs = \[ k for k in node.knobs().values() if k.hasExpression() ]\n\n    # GET ALL CURVES INSIDE THAT KNOB INCLUDING SPLIT FIELDS AND VIEWS\n    allCurves = \[]\n    for k in expKnobs:\n        allCurves += getCurves( k, views )\n\n    # BAKE ALL CURVES\n    for c in allCurves:\n        bakeCurve( c, first, last, inc )\n\n####################################################\ndef bakeDependentNodes():\n    '''Add this to onUserDestroy callback - not yet implemented'''\n    parentNode = nuke.thisNode() \n    depNodes  = parentNode.dependent( nuke.EXPRESSIONS )\n    \n    ret = nuke.getFramesAndViews( 'bake curves in dependent nodes?', '%s-%s' % (parentNode.firstFrame(), parentNode.lastFrame()) )\n    if not ret:\n        return\n    fRange = nuke.FrameRange( ret\[0] )\n    views = ret\[1]\n\n    for n in depNodes:\n        bakeExpressionKnobs( n, fRange.first(), fRange.last(), fRange.increment(), views )\n        \n\n####################################################\ndef bakeSelectedNodes():\n    '''bake selected nodes' knobs that carry expressions'''\n    ret = nuke.getFramesAndViews( 'bake curves in selected nodes?', '%s-%s' % (nuke.root().firstFrame(), nuke.root().lastFrame()) )\n    if not ret:\n        return\n    fRange = nuke.FrameRange( ret\[0] )\n    views = ret\[1]\n\n    for n in nuke.selectedNodes():\n        bakeExpressionKnobs( n, fRange.first(), fRange.last(), fRange.increment(), views )\n\n   \n#grab source cam data\n\nsrcCam = nuke.selectedNode()\nsrcName = srcCam.name()\nsrcCamX = srcCam.xpos()\nsrcCamY = srcCam.ypos()\nsrcFocalLength = srcCam\[\"focal\"].value()\nsrcHaperture = srcCam\[\"haperture\"].value()\nsrcVaperture = srcCam\[\"vaperture\"].value()\n\n#create dest cam\n\ntry:\n\n    destCam = nuke.createNode(\"Camera3\")\n\nexcept:\n    destCam = nuke.createNode(\"Camera2\")\nnuke.extractSelected()\ndestCam\[\"xpos\"].setValue(srcCamX-100)\ndestCam\[\"ypos\"].setValue(srcCamY)\n\n\n#set user knob\n\ndestCam.addKnob(nuke.Tab_Knob(\"Smoothing\"))\ndestCam.addKnob(nuke.Double_Knob(\"smooth\",\"smooth\"))\ndestCam\[\"smooth\"].setRange(0.01,1)\ndestCam\[\"smooth\"].setValue(2)\ndestCam.addKnob(nuke.XYZ_Knob(\"offset\",\"offset\"))\n\ndestCam.addKnob(nuke.PyScript_Knob(\"bake\",\"bake\",\"bakeSelectedNodes()\"))\n\n\n\n\n\n#set expressions\n\ndestCam\[\"translate\"].setExpression(srcName+\".translate.x.integrate(frame-smooth,frame+smooth)/(2*smooth)+offset.x\",0)\ndestCam\[\"translate\"].setExpression(srcName+\".translate.y.integrate(frame-smooth,frame+smooth)/(2*smooth)+offset.y\",1)\ndestCam\[\"translate\"].setExpression(srcName+\".translate.z.integrate(frame-smooth,frame+smooth)/(2*smooth)+offset.z\",2)\n\ndestCam\[\"rotate\"].setExpression(srcName+\".rotate.x.integrate(frame-smooth,frame+smooth)/(2*smooth)+offset.x\",0)\ndestCam\[\"rotate\"].setExpression(srcName+\".rotate.y.integrate(frame-smooth,frame+smooth)/(2*smooth)+offset.y\",1)\ndestCam\[\"rotate\"].setExpression(srcName+\".rotate.z.integrate(frame-smooth,frame+smooth)/(2*smooth)+offset.z\",2)\n\ndestCam\[\"focal\"].setExpression(srcName+\".focal\")\ndestCam\[\"haperture\"].setExpression(srcName+\".haperture\")\ndestCam\[\"vaperture\"].setExpression(srcName+\".vaperture\")\n" +STARTLINE}
 addUserKnob {26 _2 l "" +STARTLINE}
 addUserKnob {20 info_1 l info}
 addUserKnob {26 info l "" +STARTLINE T "- select an existing camera you would like to smooth out\n- press the \"smooth cam generator\" button\n- a new camera will pop up. You can find the smoothing controll in the \"Smoothing\" tab\n- increase the smoothing factor for removing bumps and jitter\n- use the offset if you want to modify the original motion path\n- use the bake button to bake out the animation"}
}
 Output {
  inputs 0
  name Output1
  xpos 0
  ypos 300
 }
end_group
